const nodemailer = require('nodemailer')
const HttpError = require('../models/http-error')
const Order = require('../models/order')
const Market = require('../models/market')

const order = async (req, res, next) => {
    const { address, delivery, name, order, phone, totalPrice, restarautId } =
        req.body

    const newOrder = new Order({
        address,
        delivery,
        name,
        order,
        phone,
        totalPrice,
        restarautId,
    })

    try {
        await newOrder.save()
    } catch (error) {
        return next(new HttpError('Failed to place an order, try again', 500))
    }

    let correctMarket

    try {
        correctMarket = await Market.findById(restarautId)
    } catch (error) {
        console.log(error.message)
        return next(new HttpError('Failed to find a market, try again', 500))
    }

    correctMarket.length === 0 &&
        next(new HttpError('Failed to find a market, try again', 500))

    const transporter = nodemailer.createTransport({
        host: 'smtp.ethereal.email',
        port: 587,
        auth: {
            user: 'bruce.corkery38@ethereal.email',
            pass: 'mn7T6Hpj8xwZRbj3D5',
        },
    })

    let info = await transporter.sendMail({
        from: '"Fred Foo üëª" <foo@example.com>', // sender address
        to: correctMarket.email, // list of receivers
        subject: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚úî',
        html: `<b>–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b> <br/><br/>
        <b>–ê–¥—Ä–µ—Å</b> - ${address} <br/>
        <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</b> - ${delivery} <br/>
        <b>–ò–º—è</b> - ${name} <br/>
        <b>–¢–µ–ª–µ—Ñ–æ–Ω</b> - ${phone}<br/><br/>
        <b>–ó–∞–∫–∞–∑</b>: <br/>
        ${order.map(
            order =>
                `<b>–¢–æ–≤–∞—Ä:</b> ${order.title} - <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${order.count} <br/>`
        )} <br/><br/>

        <b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ${totalPrice} —Ä—É–±–ª–µ–π
        `,
    })

    transporter.sendMail(info, (error, info) => {
        if (error) {
            res.status(500).json({
                message: '–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞',
            })
            return process.exit(1)
        }
    })

    res.status(200).json({ message: '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' })
}

module.exports = { order }
